# Getting Started

## 1 - Update Module Path

- Replace all instances of the placeholder module path with your own:

```bash
github.com/charmingruby/pack
```

- You’ll also find additional references to pack in the following files:
    - docker-compose.yml
    - .env and .env.example
    - Makefile

- On Github Actions, there is a workflow to push container image to DockerHub, but some actions is needed:
    - Change image name;
    - Configure repo secrets;

- Make sure to update them accordingly to reflect your project name.

## 2 - Modules
- The internal/ directory contains a sample module structure.
- Use it as a starting point to organize and develop your own modules.

## 3 - Testing
- Ensure test support is properly configured, including usage of mockery.
- Refer to the Makefile for available test commands and setup instructions.

## 4 - Persistence Layer
- PostgreSQL is configured as the default database.
- You’ll find ready-to-use assets including:
    - SQL migration files;
    - Database setup scripts;
    - Sample repository pattern implementation;

## 5 - Communication Layer

The `delivery/` directory defines how the application communicates externally.

### **`delivery/http/`**
Synchronous HTTP-based communication:
- `rest/` — REST APIs
- `grpc/` — gRPC services
- `gql/` — GraphQL APIs

### **`delivery/event/`**
Asynchronous, event-driven communication via brokers:
- `rabbitmq/`
- `nats/`
- `kafka/`

**Guidelines:**
- Avoid deep nesting unless necessary.
- If you are certain you will only use a single package, you can keep just `http/` directly — or even skip the `delivery/` folder entirely — to simplify the structure.
- The same separation exists in `pkg/` for clarity and reusability.
